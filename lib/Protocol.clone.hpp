
MsgPtr AckSequence::clone() const { MsgPtr msg ( new AckSequence ( *this ) ); msg->invalidate(); return msg; }
MsgPtr BothInputs::clone() const { MsgPtr msg ( new BothInputs ( *this ) ); msg->invalidate(); return msg; }
MsgPtr ChangeConfig::clone() const { MsgPtr msg ( new ChangeConfig ( *this ) ); msg->invalidate(); return msg; }
MsgPtr ClientMode::clone() const { MsgPtr msg ( new ClientMode ( *this ) ); msg->invalidate(); return msg; }
MsgPtr ConfirmConfig::clone() const { MsgPtr msg ( new ConfirmConfig ( *this ) ); msg->invalidate(); return msg; }
MsgPtr ControllerMappings::clone() const { MsgPtr msg ( new ControllerMappings ( *this ) ); msg->invalidate(); return msg; }
MsgPtr ErrorMessage::clone() const { MsgPtr msg ( new ErrorMessage ( *this ) ); msg->invalidate(); return msg; }
MsgPtr GoBackN::clone() const { MsgPtr msg ( new GoBackN ( *this ) ); msg->invalidate(); return msg; }
MsgPtr InitialConfig::clone() const { MsgPtr msg ( new InitialConfig ( *this ) ); msg->invalidate(); return msg; }
MsgPtr InitialGameState::clone() const { MsgPtr msg ( new InitialGameState ( *this ) ); msg->invalidate(); return msg; }
MsgPtr IpAddrPort::clone() const { MsgPtr msg ( new IpAddrPort ( *this ) ); msg->invalidate(); return msg; }
MsgPtr IpcConnected::clone() const { MsgPtr msg ( new IpcConnected ( *this ) ); msg->invalidate(); return msg; }
MsgPtr JoystickMappings::clone() const { MsgPtr msg ( new JoystickMappings ( *this ) ); msg->invalidate(); return msg; }
MsgPtr JoysticksChanged::clone() const { MsgPtr msg ( new JoysticksChanged ( *this ) ); msg->invalidate(); return msg; }
MsgPtr KeyboardEvent::clone() const { MsgPtr msg ( new KeyboardEvent ( *this ) ); msg->invalidate(); return msg; }
MsgPtr KeyboardMappings::clone() const { MsgPtr msg ( new KeyboardMappings ( *this ) ); msg->invalidate(); return msg; }
MsgPtr MenuIndex::clone() const { MsgPtr msg ( new MenuIndex ( *this ) ); msg->invalidate(); return msg; }
MsgPtr NetplayConfig::clone() const { MsgPtr msg ( new NetplayConfig ( *this ) ); msg->invalidate(); return msg; }
MsgPtr OptionsMessage::clone() const { MsgPtr msg ( new OptionsMessage ( *this ) ); msg->invalidate(); return msg; }
MsgPtr PaletteManager::clone() const { MsgPtr msg ( new PaletteManager ( *this ) ); msg->invalidate(); return msg; }
MsgPtr Ping::clone() const { MsgPtr msg ( new Ping ( *this ) ); msg->invalidate(); return msg; }
MsgPtr PingStats::clone() const { MsgPtr msg ( new PingStats ( *this ) ); msg->invalidate(); return msg; }
MsgPtr PlayerInputs::clone() const { MsgPtr msg ( new PlayerInputs ( *this ) ); msg->invalidate(); return msg; }
MsgPtr RngState::clone() const { MsgPtr msg ( new RngState ( *this ) ); msg->invalidate(); return msg; }
MsgPtr SocketShareData::clone() const { MsgPtr msg ( new SocketShareData ( *this ) ); msg->invalidate(); return msg; }
MsgPtr SpectateConfig::clone() const { MsgPtr msg ( new SpectateConfig ( *this ) ); msg->invalidate(); return msg; }
MsgPtr SplitMessage::clone() const { MsgPtr msg ( new SplitMessage ( *this ) ); msg->invalidate(); return msg; }
MsgPtr Statistics::clone() const { MsgPtr msg ( new Statistics ( *this ) ); msg->invalidate(); return msg; }
MsgPtr SyncHash::clone() const { MsgPtr msg ( new SyncHash ( *this ) ); msg->invalidate(); return msg; }
MsgPtr TestMessage::clone() const { MsgPtr msg ( new TestMessage ( *this ) ); msg->invalidate(); return msg; }
MsgPtr TransitionIndex::clone() const { MsgPtr msg ( new TransitionIndex ( *this ) ); msg->invalidate(); return msg; }
MsgPtr UdpControl::clone() const { MsgPtr msg ( new UdpControl ( *this ) ); msg->invalidate(); return msg; }
MsgPtr Version::clone() const { MsgPtr msg ( new Version ( *this ) ); msg->invalidate(); return msg; }
MsgPtr VersionConfig::clone() const { MsgPtr msg ( new VersionConfig ( *this ) ); msg->invalidate(); return msg; }
