#!/bin/sh

DIR=lib

echo 'FirstType = 0,' > $DIR/tmp

grep --extended-regexp "public Serializable[A-Z]" "$@" \
  | sed -r 's/^.+\.h:[a-z]+ ([A-Za-z0-9]+) .+$$/\1,/' \
  | sort \
  >> $DIR/tmp

echo 'LastType' >> $DIR/tmp

diff $DIR/tmp $DIR/Protocol.enum.h 1> /dev/null 2>&1

if [ $? -ne 0 ]; then

  echo Regenerating protocol

  mv -f $DIR/tmp $DIR/Protocol.enum.h

  grep --extended-regexp "public Serializable[A-Z]" "$@" \
    | sed -r \
      's/^(.+\.h):[a-z]+ ([A-Za-z0-9]+) .+$$/#include "\1"/' \
    | sort \
    | uniq \
    > $DIR/Protocol.includes.h

  grep --extended-regexp "public Serializable[A-Z]" "$@" | grep --invert-match "no-clone" \
    | sed -r \
      's/^(.+\.h):[a-z]+ ([A-Za-z0-9]+) .+$$/MsgPtr \2::clone() const { return MsgPtr ( new \2 ( *this ) ); }/' \
    | sort \
    | uniq \
    > $DIR/Protocol.clone.h

  grep --extended-regexp "public Serializable[A-Z]" "$@" | grep --invert-match "no-type" \
    | sed -r \
      's/^(.+\.h):[a-z]+ ([A-Za-z0-9]+) .+$$/MsgType \2::getMsgType() const { return MsgType::\2; }/' \
    | sort \
    | uniq \
    > $DIR/Protocol.types.h

  grep --extended-regexp "public Serializable[A-Z]" "$@" \
    | sed -r 's/^.+\.h:[a-z]+ ([A-Za-z0-9]+) .+$$/case MsgType::\1: return ( os << "\1" );/' \
    | sort \
    > $DIR/Protocol.strings.h

  grep --extended-regexp "public Serializable[A-Z]" "$@" \
    | sed -r 's/^.+\.h:[a-z]+ ([A-Za-z0-9]+) .+$$/case MsgType::\1: msg.reset ( new \1() ); break;/' \
    | sort \
    > $DIR/Protocol.decode.h

else

  rm -f $DIR/tmp

fi
