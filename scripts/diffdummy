#!/usr/bin/env python

import sys, os, re

if len ( sys.argv ) < 3 :
    print 'Usage: ' + os.path.basename ( sys.argv[0] ) + ' <dummy-sync-log> <regular-sync-log>'
    exit ( 0 )


f = open ( sys.argv[1] )
g = open ( sys.argv[2] )

dlog = f.readlines()
rlog = g.readlines()

g.close()
f.close()


skip = True
j = -1

for i in range ( 0, len ( rlog ) ):
    if skip:
        # Skip lines until after CharaSelect state
        if rlog[i].find ( 'CharaSelect' ) > 0:
            skip = False
        else:
            continue

    else:
        m = re.match ( '^.+::([A-Za-z]+) \[([0-9]+):([0-9]+)\] (Inputs: .+)$', rlog[i] )

        # Skip Loading and Skippable states
        if ( not m ) or ( m.group ( 1 ) == 'Loading' ) or ( m.group ( 1 ) == 'Skippable' ):
            continue

        rstate = m.group ( 1 )
        rindex = int ( m.group ( 2 ) )
        rframe = int ( m.group ( 3 ) )
        rinputs = m.group ( 4 )

        while j < len ( dlog ):
            j += 1
            m = re.match ( '^\[([0-9]+):([0-9]+)\] (Inputs: .+)$', dlog[j] )

            if not m:
                print 'Invalid line in dummy sync log:'
                print dlog[j]
                exit ( 0 )

            dindex = int ( m.group ( 1 ) )
            dframe = int ( m.group ( 2 ) )
            dinputs = m.group ( 3 )

            if dindex < rindex:
                continue

            if ( dindex == rindex ) and ( dframe < rframe ):
                continue

            if ( dindex == rindex ) and ( dframe == rframe ) and ( dinputs != rinputs ):
                print 'Mismatch:'
                print '%s [%u:%u] %s != [%u:%u] %s' % ( rstate, dindex, dframe, dinputs, rindex, rframe, rinputs )
                exit ( 0 )

            if ( dindex == rindex ) and ( dframe == rframe ) and ( dinputs == rinputs ):
                # Matched
                break

            print 'Dummy sync log is missing:'
            print '%s [%u:%u] %s' % ( rstate, rindex, rframe, rinputs )
            exit ( 0 )


if skip:
    print 'Invalid regular sync log'
